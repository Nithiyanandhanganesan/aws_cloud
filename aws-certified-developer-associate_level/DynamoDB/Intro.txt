DynamoDB:
=============

- Amazon's fully managed proprietary NoSQL DB.
- We cannot create database. We can create only tables. Also, we dont have to specify the schema while creating the table.
- While creating the table, will give the table name and specify the partition key and sort key for that table.
- If we have same value for partition key, then using Sort Key data will be sorted and stored in DB.
- Combination of partition key and sort key forms the primary key.

- We can either scan the full table or query the table.
- During query, we should add filter condition. Filter condition should only on partition key and sort key(if exists).
- If you want to filter only based on other columns , we have to use secondary indexes.

Features:
===========
- Data is stored in SSD.
- Replication across regions.
- Multi-language support(java,php,python...)
- cli
- flexible data model with attributed and items.
- eventual and strongly consistent.
- conditional updates and concurrency control.
- ingrates monitoring.
- change read and write performance capacity on the fly.




Local secondary indexes and global secondary indexes:
=======================================================

We don't have to insert records to index. insert only to the table and aws will sync the data with index.
Local:
--------
 - It should have same partitions key but different sort key.
 - At the max we can have only 5 different sort key in local index.(totally 6)
 - Read and write capacity will be same as original table.
 - local index can be created only on the new table not on the existing table.

Global:
---------
 - We can have any key as partitions key and sort key.
 - Read and write capacity will vary for each global index.
 - At the max we can have only 5 different sort key in global index.
 - supports only eventual consistent read.

Projected Attributes:
======================
 - attributes copied from table to index in addition to primary key and indix key.
 types:
   - keys_only (small index, more performance)
   - include (only specied attributes are projected)
   - all   (big index, less performance)


Hands-on:
==============

- go to DynamoDB console.
- Enter table name
- Enter partition key , sort key
- Uncheck "Use default settings" to add index.
- Select "Add index"
- If you enter partition key same as table partition key, then it will create it as local secondary index.
- select create table

Limits:
===========

- only 256 table per region.
- partition key length: 2048bytes maximum.
- sort key length: 1024 bytes maximum
- item size: 400 kb including attribute name and value.

API specific limits:
=======================
- upto 10 createtable,update table, delete table action running simultaneously.
- single batchgetitem operation, can get max of 100 items and it must be <16 mb in size
- single batchwriteitem operation, can contain upto 25 putitem or deleteitem request and size should be <16 mb.
- query and scan result set is limited to 1 mb of data per cell. Use "LastEvaluatedKey" in response to get more data.

Throughput:
===================

DynamaDB table throughput is depends on the read and write capacity.

Unit of read capacity:
 - 1 strongly consistent or 2 eventually consistent reads per second for items as large as 4 Kb
 - Each read capacity can handle upto 4 Kb of data.

Unit of write capacity:
 - 1 write per second for items upto 1 Kb.
 - Each write capacity can handle upto 1 Kb of data

Calculating read capacity:
-----------------------------
 - round the size of items to nearest 4Kb multiplier
 - Formula
    - Strongly consistent
        (ITEM SIZE (rounded to nearest 4 Kb multiplier) / 4 Kb)* no. of items
    - Eventually consistent.
        ((ITEM SIZE (rounded to nearest 4 Kb multiplier) / 4 Kb)* no. of items)/2
 - Eg
   - Item size = 7 Kb
   - want to read 80 items per second.
   - ( 8 / 4) * 80 = 160 (strongly consistent)
   - ((8/4)*80)/2  = 80  (eventual consistent)
   - so, we need to set read capacity as 160 to read all items at the same time with strong consistent.

Calculating write capacity:
------------------------------
 - Round item upto nearest 1Kb multiplier
 - Formuls
    - (ITEM SIZE (rounded to nearest 1 Kb multiplier) / 1 Kb)* no. of items

 - Eg
   - Item size = 1.5 Kb
   - 10 items per second. How many write capacity required?
   - (2 /1 )*10 = 20
   - 20 write capacity is required to write 10 items per second.

Calculating througput based on local secondary index:
------------------------------------------------------

Read:
 - uses same read/write capacity from the parent table.
 - If we read only index keys and projected attributes , then calculation is same as read capacity.
 - If queried attributes are not projected attributes or keys, then we get extra latency and read capacity cost.
Write:
 - delete ,update,add costs write capacity to perform action on the local index.
 - write a new item or update the existing item, costs one write operation to put item on the index.
 - if you change the value of indexed keyed attribute, two write required. (one to delete & one to add)
 - if an update delete an item that was in the index, one write is required to delete the item in the index.

Calculating througput based on global secondary index:
------------------------------------------------------

Read:
 - global index have their own throuput capacity irrespective of tables capacity.
 - support eventual consistent , so it can read upto 8kb.
 - reads in global index is same as tables expect that size of index entries is used instead of entire item.

Write:
 - add, update, delete consumes index write capacity units.


Exceeding throughput:
-----------------------
 - request exceeding the allocated throughput may be throttled.
 - with global secondary index, all index must have enough write capacity or the write might get throttled.



Query vs Scan API calls:
===========================

Query:
---------
 - Find items in the table only by using the primary key from a table or secondary index.
 - returns only the items matching the primary key search condition.
 - efficient becaz it search only the index/primary key.
 - is eventual consistent by default . We can request consistent read.


Scans:
--------
 - read every item in the table is operationally inefficient.
 - looks for all item and attributes in a table by default.

 - it can apply filter to the result set.
 - return only specific attributes with ProjectionExpression parameter.

 - larger the dataset, higher the latency.
 - more filters slowers the performance.
 - only eventual consistent read are available.

Conditional Write and atomic counters:
=========================================

Atomic Counters:
-----------------
 - increment or decrement the value of an attribute without inferring with other write request.
 - request are applied in the order it received.
 - updates are not idompotent. (update the value each time it is called)
 - use case: increasing view count

Conditional Writes:
-------------------
 - helps coordinates writes
 - check for condition before proceeding with the operation.
 - supported for putitem, deleteitem, updateitem.
 - specify condiditon in "ConditionalExpressions" ( contain attributes names, conditional operators and built in functions)
 - failed conditional write returns "ConditionalCheckFailedException"
