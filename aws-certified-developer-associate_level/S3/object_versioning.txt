Versioning:
==============

- Keeps multiple version of the objects.
- Versioning can be set up at bucket level.
- Automatically archives object.


If we enable versioning on the already existing bucket, all existing object will get "null" version id.
Objects added after versioning will get the unique id generated by s3.
While accessing the object , we dont need to specify the version id. By default it will give the latest version.
We can access the old version by using the version id.

Deleting objects:
=====================

If we delete the objects, it will delete only the latest version of the objects.
Old version are still accessible by using the version id.

To permanently delete the version, we have to specify the version id while deleting.	

Restoring pervious versioned objects:
=======================================
 - copy the previous version into the same bucket will restore it as current version.
 - permanently delete the current version by specifying the id.
 - previous version will become the current version with different version id.
 
Lifecycle management with versioning:
======================================

- It dictates what happens to version after certain amount of time.
   - eg: send noncurrent version to amazon glacier(archieve storage in aws)
   - eg: permanently delete noncurrent version after 180 days.
   
Disabling versioning:
========================

Bucket can be in three states:
 - unversioned (default)
 - versioning enabled
 - versioning suspended.
 
- once version enabled, bucket cannot go back to unversioned state.
- we can suspend versioning, but only new objects will get null version id . Existing objects will not change.


Setup versioning:
======================

- select the bucket -> properties -> versioning -> enable versioning

